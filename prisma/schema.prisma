// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator erd {
  provider = "prisma-erd-generator"
  theme = "forest"
  output = "ERD.md"
  includeRelationFromFields = true
}


model TimeSlot {
  id       Int        @id @default(autoincrement())
  slotTime DateTime   @unique // 予約枠の開始時刻
  slotType SlotType // 枠の種類 (予約可能 or 当日枠)
  status   SlotStatus @default(AVAILABLE) // 予約状況 (空き or 予約済み)

  // この時間枠に行われた予約 (リレーション)
  // timeSlotIdがuniqueなので、このリストには最大1つの予約しか入らない
  reservation Reservation?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum SlotType {
  RESERVABLE // 予約可能枠
  WALK_IN // 予約不要の当日枠
}

enum SlotStatus {
  AVAILABLE // 空きあり
  BOOKED // 予約済み
}



model Reservation {
  id         Int       @id @default(autoincrement())
  lineUserId String? // オプショナルに変更
  startTime  DateTime

  timeSlotId Int?      @unique // TimeSlotとのリレーション用
  timeSlot   TimeSlot? @relation(fields: [timeSlotId], references: [id])

  teams      Team[]

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt


  @@index([timeSlotId])
  @@index([lineUserId])
}

model Team {
  id           Int           @id @default(autoincrement())
  name         String
  headcount    Int

  reservation_id Int
  reservation    Reservation @relation(fields: [reservation_id], references: [id])

  players        Player[]
  gameSessions   GameSession[]
  teamScores     TeamScore[]

  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Player {
  id          Int        @id @default(autoincrement())
  name        String?
  
  team_id      Int
  team         Team @relation(fields: [team_id], references: [id])
  playerScores PlayerScore[]

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}


model GameSession {
  id          Int         @id @default(autoincrement())
  name        String
  description String?
  
  team_id    Int
  team       Team @relation(fields: [team_id], references: [id])
  teamScores TeamScore[]

  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model TeamScore {
  id            Int          @id @default(autoincrement())
  score         Int

  team_id         Int
  game_session_id Int
  team            Team        @relation(fields: [team_id], references: [id])
  gameSession     GameSession @relation(fields: [game_session_id], references: [id])
  
  playerScores    PlayerScore[]

  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@index([team_id])
  @@index([game_session_id])
}

model PlayerScore {
  id            Int          @id @default(autoincrement())
  score         Int

  player_id     Int
  team_score_id Int
  player        Player    @relation(fields: [player_id], references: [id])
  teamScore     TeamScore @relation(fields: [team_score_id], references: [id])
  
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@index([player_id])
  @@index([team_score_id])
}



