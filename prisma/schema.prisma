generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider                  = "prisma-erd-generator"
  output                    = "ERD.md"
  includeRelationFromFields = "true"
  theme                     = "forest"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model TimeSlot {
  id          Int          @id @default(autoincrement())
  slotTime    DateTime     @unique
  slotType    SlotType
  status      SlotStatus   @default(AVAILABLE)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  reservation Reservation?
}

model Reservation {
  id         Int       @id @default(autoincrement())
  startTime  DateTime
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  timeSlotId Int?      @unique
  lineUserId String?
  timeSlot   TimeSlot? @relation(fields: [timeSlotId], references: [id])
  teams      Team[]

  @@index([timeSlotId])
  @@index([lineUserId])
}

model Team {
  id             Int           @id @default(autoincrement())
  name           String
  headcount      Int
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  reservation_id Int
  gameSessions   GameSession[]
  players        Player[]
  reservation    Reservation   @relation(fields: [reservation_id], references: [id])
  teamScores     TeamScore[]
}

model Player {
  id           Int           @id @default(autoincrement())
  name         String?
  team_id      Int
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  team         Team          @relation(fields: [team_id], references: [id])
  playerScores PlayerScore[]
}

model GameSession {
  id          Int         @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  team_id     Int
  team        Team        @relation(fields: [team_id], references: [id])
  teamScores  TeamScore[]
}

model TeamScore {
  id              Int           @id @default(autoincrement())
  score           Int
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  game_session_id Int
  team_id         Int
  playerScores    PlayerScore[]
  gameSession     GameSession   @relation(fields: [game_session_id], references: [id])
  team            Team          @relation(fields: [team_id], references: [id])

  @@index([team_id])
  @@index([game_session_id])
}

model PlayerScore {
  id            Int       @id @default(autoincrement())
  score         Int
  player_id     Int
  team_score_id Int
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  player        Player    @relation(fields: [player_id], references: [id])
  teamScore     TeamScore @relation(fields: [team_score_id], references: [id])

  @@index([player_id])
  @@index([team_score_id])
}

enum SlotType {
  RESERVABLE
  WALK_IN
}

enum SlotStatus {
  AVAILABLE
  BOOKED
}
