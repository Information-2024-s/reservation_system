// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String        @id @default(cuid())
  name        String?
  teamId      Int?
  team        Team?         @relation(fields: [teamId], references: [id])
  userScores  UserScore[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  Reservation Reservation[]

  @@map("users")
}

model Team {
  id           Int           @id @default(autoincrement())
  name         String
  headcount    Int
  scores       TeamScore[]
  users        User[]
  reservations Reservation[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  userId       String?
}

model GameSession {
  id          Int         @id @default(autoincrement())
  name        String
  description String?
  teamScores  TeamScore[]
  userScores  UserScore[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model TeamScore {
  id            Int          @id @default(autoincrement())
  teamId        Int
  score         Int
  gameSessionId Int?
  team          Team         @relation(fields: [teamId], references: [id])
  gameSession   GameSession? @relation(fields: [gameSessionId], references: [id])
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@index([teamId])
  @@index([gameSessionId])
}

model UserScore {
  id            Int          @id @default(autoincrement())
  userId        String       @map("user_id")
  score         Int
  gameSessionId Int?
  user          User         @relation(fields: [userId], references: [id])
  gameSession   GameSession? @relation(fields: [gameSessionId], references: [id])
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@index([userId])
  @@index([gameSessionId])
}

model Reservation {
  id         Int       @id @default(autoincrement())
  teamId     Int
  lineUserId String? // オプショナルに変更
  startTime  DateTime
  team       Team?     @relation(fields: [teamId], references: [id])
  timeSlotId Int?      @unique // TimeSlotとのリレーション用
  timeSlot   TimeSlot? @relation(fields: [timeSlotId], references: [id])
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  User       User?     @relation(fields: [userId], references: [id])
  userId     String?

  @@index([teamId])
  @@index([timeSlotId])
  @@index([lineUserId])
}

model TimeSlot {
  id       Int        @id @default(autoincrement())
  slotTime DateTime   @unique // 予約枠の開始時刻
  slotType SlotType // 枠の種類 (予約可能 or 当日枠)
  status   SlotStatus @default(AVAILABLE) // 予約状況 (空き or 予約済み)

  // この時間枠に行われた予約 (リレーション)
  // timeSlotIdがuniqueなので、このリストには最大1つの予約しか入らない
  reservation Reservation?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum SlotType {
  RESERVABLE // 予約可能枠
  WALK_IN // 予約不要の当日枠
}

enum SlotStatus {
  AVAILABLE // 空きあり
  BOOKED // 予約済み
}
